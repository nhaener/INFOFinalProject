#############################################################
#############################################################
## Section to: change percents and numbers to integer values
#############################################################
#############################################################
OB <- make_numeric(OB)
OB_S <- make_numeric(OB_S)
AC <- make_numeric(AC)
AC_S <- make_numeric(AC_S)
#############################################################
#############################################################
## Section to: add LL data to all files
#############################################################
#############################################################
OB <- add_location(OB, LL)
OB_S <- add_location(OB_S, LL)
AC <- add_location(AC, LL)
AC_S <- add_location(AC_S, LL)
View(OB)
###################################### Data Format Functions ###################################
#############################################################
#############################################################
## Functions for: correct column names of all files
#############################################################
#############################################################
# Format data function
format_data <- function(df, years, start, end) {
df_repeated_col <- get_last(df, 1, start, end)
df_col_names <- c("State", "FIPS_Codes", "County", years(df_repeated_col, years))
df <- fix_df(df, df_col_names)
return(df)
}
# Functions to add year to col names, return vector of strings
years <- function(col_values, years) {
values <- c()
for (int in years) {
values <- append(values, cn_year(col_values, int))
}
return(values)
}
cn_year <- function(col_values, year) {
values <- c()
for (string in col_values) {
values <- append(values, value_year(string, year))
}
return(values)
}
value_year <- function(value, year) {
return(paste(value, year, sep = "_"))
}
# function to get last value
get_last <- function(df, row, start, end) {
df <- df[row,start:end]
values <- c()
for (int in c(1:(end - start))) {
values <- append(values, as.character(factor(df[[row, int]])))
}
return(values)
}
# Functions to update data sets
fix_df <- function(df, new_colnames) {
colnames(df) <- new_colnames
return(df[-1,])
}
#############################################################
#############################################################
## Functions for: correct column names of all files
#############################################################
#############################################################
remove_cols <- function(df) {
df <- df %>% select(1:3, contains("number"), starts_with("percent"))
return(df)
}
#############################################################
#############################################################
## Functions for: correct column names of all files
#############################################################
#############################################################
make_numeric <- function(df) {
df_length <- ncol(df)
col_names <- c(df %>% select(4:df_length) %>% colnames())
values <- c()
for (string in col_names) {
df[,string] <- as.numeric(levels(df[, string]))[df[,string]]
}
return(df)
}
#############################################################
#############################################################
## Functions for: Adding Lat and Long data
#############################################################
#############################################################
add_location <- function(df, LL_df) {
LL_StCo <- LL_df[, c("State", "County", "Lat", "Long")]
joined <- left_join(df, LL_StCo, by = c('State', 'County'))
return(joined)
}
#############################################################
#############################################################
## This file will be used to organize our data sets into the
## format we need for our project.
##
## File name convention:
## OB <- Obesity Prevalence
## S <- sex
## AC <- Activity
## LL <- Lat & Long
## AB <- State Abbreviation names
##
## See google doc and/or issues for what needs to be done.
##
#############################################################
#############################################################
#############################################################
## Set working directory
# setwd("")
#############################################################
## Library
library(DataCombine)
library(dplyr)
#############################################################
#Source data formatting functions
source("format_functions.R")
#############################################################
## Reads in files to be worked on
LL <- read.csv("data/Lat_long_by_county.csv")
AB <- read.csv("data/StateName_abvr.csv")
OB <- read.csv("data/OB_PREV_ALL_STATES.csv")
OB_S <- read.csv("data/OB_PREV_by_sex_ALL_STATES.csv")
AC <- read.csv("data/LTPIA_PREV_ALL_STATES.csv")
AC_S <- read.csv("data/LTPIA_PREV_by_sex_ALL_STATES.csv")
#############################################################
#############################################################
## Section to work on LL and AB data
#############################################################
#############################################################
# Corrects LL to have full state name, requires DataCombine package
# to be loaded.
LL <- FindReplace(LL, "USPS", AB, from = "Abbreviation", to ="US.State",
exact = TRUE)
# Sets LL Column names
colnames(LL) <- c("State", "GEOID", "ANSICODE", "County", "Lat", "Long")
#############################################################
#############################################################
## Section to: correct column names of all files
#############################################################
#############################################################
# Formats column names for each file
OB <- format_data(OB, 2004:2012, 4, 11)
OB_S <- format_data(OB_S, 2009:2012, 4, 18)
AC <- format_data(AC, 2004:2012, 4, 11)
AC_S <- format_data(AC_S, 2009:2012, 4, 18)
#############################################################
#############################################################
## Section to: remove unnecessary information
#############################################################
#############################################################
OB <- remove_cols(OB)
OB_S <- remove_cols(OB_S)
AC <- remove_cols(OB_S)
AC_S <- remove_cols(OB_S)
#############################################################
#############################################################
## Section to: change percents and numbers to integer values
#############################################################
#############################################################
OB <- make_numeric(OB)
OB_S <- make_numeric(OB_S)
AC <- make_numeric(AC)
AC_S <- make_numeric(AC_S)
#############################################################
#############################################################
## Section to: add LL data to all files
#############################################################
#############################################################
OB <- add_location(OB, LL)
OB_S <- add_location(OB_S, LL)
AC <- add_location(AC, LL)
AC_S <- add_location(AC_S, LL)
View(OB)
View(OB)
#############################################################
#############################################################
## This file will be used to manipulate our data sets and
## retrieve relevant information.
##
## File name convention:
## OB <- Obesity Prevalence
## S <- sex
## AC <- Activity
## LL <- Lat & Long
## AB <- State Abbreviation names
## See google doc and/or issues for what needs to be done.
##
#############################################################
#############################################################
########################## DATA Manipulation ######################################
###################################################################################
## Set working directory
setwd("/Users/Nick/info498f/INFOFinalProject")
## Source formatted data
source("data_format.R")
## Library
library(dplyr)
#DYPLR functions
avg_yr_state <- function(df, year, my_state){
#Filter data frame by state and select year
my_df <- df %>% select(1:3, contains(year)) %>%
filter(df$State == my_state)
#create columns
#colNames <- c(my_state, year, 'Average Percent Obese')
perCol <- paste0("percent_", year)
#make numeric
my_df[,perCol] <- as.numeric(levels(my_df[,perCol])[my_df[,perCol]])
#get rounded average for obesity
avg <- my_df %>% summarise(mean(my_df[,perCol]))
rounded_avg <- round(avg, digits = 1)
#create new data frame
avg_df <- data.frame(my_state, year, rounded_avg)
names(avg_df) <- c(my_state, year, 'Average Percentage Obese')
return(avg_df)
}
#function test
df <- avg_yr_state(OB,'2004', "Washington")
df2 <- avg_yr_state(AC, '2004', "Washington")
df3 <- df %>% mutate("Avg Active People" = df2$'Average Percentage Obese')
source("data_format.R")
library(DataCombine)
install.packages("DataCombine")
#############################################################
#############################################################
## This file will be used to manipulate our data sets and
## retrieve relevant information.
##
## File name convention:
## OB <- Obesity Prevalence
## S <- sex
## AC <- Activity
## LL <- Lat & Long
## AB <- State Abbreviation names
## See google doc and/or issues for what needs to be done.
##
#############################################################
#############################################################
########################## DATA Manipulation ######################################
###################################################################################
## Set working directory
setwd("/Users/Nick/info498f/INFOFinalProject")
## Source formatted data
source("data_format.R")
## Library
library(dplyr)
#DYPLR functions
avg_yr_state <- function(df, year, my_state){
#Filter data frame by state and select year
my_df <- df %>% select(1:3, contains(year)) %>%
filter(df$State == my_state)
#create columns
#colNames <- c(my_state, year, 'Average Percent Obese')
perCol <- paste0("percent_", year)
#make numeric
my_df[,perCol] <- as.numeric(levels(my_df[,perCol])[my_df[,perCol]])
#get rounded average for obesity
avg <- my_df %>% summarise(mean(my_df[,perCol]))
rounded_avg <- round(avg, digits = 1)
#create new data frame
avg_df <- data.frame(my_state, year, rounded_avg)
names(avg_df) <- c(my_state, year, 'Average Percentage Obese')
return(avg_df)
}
#function test
df <- avg_yr_state(OB,'2004', "Washington")
df2 <- avg_yr_state(AC, '2004', "Washington")
df3 <- df %>% mutate("Avg Active People" = df2$'Average Percentage Obese')
getwd
getwd()
#############################################################
#############################################################
## This file will be used to manipulate our data sets and
## retrieve relevant information.
##
## File name convention:
## OB <- Obesity Prevalence
## S <- sex
## AC <- Activity
## LL <- Lat & Long
## AB <- State Abbreviation names
## See google doc and/or issues for what needs to be done.
##
#############################################################
#############################################################
########################## DATA Manipulation ######################################
###################################################################################
## Set working directory
# setwd("/Users/Nick/info498f/INFOFinalProject")
## Source formatted data
source("data_format.R")
## Library
library(dplyr)
#DYPLR functions
avg_yr_state <- function(df, year, my_state){
#Filter data frame by state and select year
my_df <- df %>% select(1:3, contains(year)) %>%
filter(df$State == my_state)
#create columns
#colNames <- c(my_state, year, 'Average Percent Obese')
perCol <- paste0("percent_", year)
#make numeric
my_df[,perCol] <- as.numeric(levels(my_df[,perCol])[my_df[,perCol]])
#get rounded average for obesity
avg <- my_df %>% summarise(mean(my_df[,perCol]))
rounded_avg <- round(avg, digits = 1)
#create new data frame
avg_df <- data.frame(my_state, year, rounded_avg)
names(avg_df) <- c(my_state, year, 'Average Percentage Obese')
return(avg_df)
}
# #function test
# df <- avg_yr_state(OB,'2004', "Washington")
# df2 <- avg_yr_state(AC, '2004', "Washington")
#
# df3 <- df %>% mutate("Avg Active People" = df2$'Average Percentage Obese')
df <- avg_yr_state(OB,'2004', "Washington")
df2 <- avg_yr_state(AC, '2004', "Washington")
View(AC)
View(AC)
View(AC)
View(AC)
#############################################################
#############################################################
## This file will be used to organize our data sets into the
## format we need for our project.
##
## File name convention:
## OB <- Obesity Prevalence
## S <- sex
## AC <- Activity
## LL <- Lat & Long
## AB <- State Abbreviation names
##
## See google doc and/or issues for what needs to be done.
##
#############################################################
#############################################################
#############################################################
## Set working directory
# setwd("")
#############################################################
## Install any packages
# install.packages("DataCombine")
#############################################################
## Library
library(DataCombine)
library(dplyr)
#############################################################
#Source data formatting functions
source("format_functions.R")
#############################################################
## Reads in files to be worked on
LL <- read.csv("data/Lat_long_by_county.csv")
AB <- read.csv("data/StateName_abvr.csv")
OB <- read.csv("data/OB_PREV_ALL_STATES.csv")
OB_S <- read.csv("data/OB_PREV_by_sex_ALL_STATES.csv")
AC <- read.csv("data/LTPIA_PREV_ALL_STATES.csv")
AC_S <- read.csv("data/LTPIA_PREV_by_sex_ALL_STATES.csv")
#############################################################
#############################################################
## Section to work on LL and AB data
#############################################################
#############################################################
# Corrects LL to have full state name, requires DataCombine package
# to be loaded.
LL <- FindReplace(LL, "USPS", AB, from = "Abbreviation", to ="US.State",
exact = TRUE)
# Sets LL Column names
colnames(LL) <- c("State", "GEOID", "ANSICODE", "County", "Lat", "Long")
#############################################################
#############################################################
## Section to: correct column names of all files
#############################################################
#############################################################
# Formats column names for each file
OB <- format_data(OB, 2004:2012, 4, 11)
OB_S <- format_data(OB_S, 2009:2012, 4, 18)
AC <- format_data(AC, 2004:2012, 4, 11)
AC_S <- format_data(AC_S, 2009:2012, 4, 18)
#############################################################
#############################################################
## Section to: remove unnecessary information
#############################################################
#############################################################
OB <- remove_cols(OB)
OB_S <- remove_cols(OB_S)
AC <- remove_cols(AC)
AC_S <- remove_cols(AC_S)
#############################################################
#############################################################
## Section to: change percents and numbers to integer values
#############################################################
#############################################################
OB <- make_numeric(OB)
OB_S <- make_numeric(OB_S)
AC <- make_numeric(AC)
AC_S <- make_numeric(AC_S)
#############################################################
#############################################################
## Section to: add LL data to all files
#############################################################
#############################################################
OB <- add_location(OB, LL)
OB_S <- add_location(OB_S, LL)
AC <- add_location(AC, LL)
AC_S <- add_location(AC_S, LL)
#############################################################
#############################################################
## This file will be used to manipulate our data sets and
## retrieve relevant information.
##
## File name convention:
## OB <- Obesity Prevalence
## S <- sex
## AC <- Activity
## LL <- Lat & Long
## AB <- State Abbreviation names
## See google doc and/or issues for what needs to be done.
##
#############################################################
#############################################################
########################## DATA Manipulation ######################################
###################################################################################
## Set working directory
# setwd("/Users/Nick/info498f/INFOFinalProject")
## Source formatted data
source("data_format.R")
## Library
library(dplyr)
#DYPLR functions
avg_yr_state <- function(df, year, my_state){
#Filter data frame by state and select year
my_df <- df %>% select(1:3, contains(year)) %>%
filter(df$State == my_state)
#create columns
#colNames <- c(my_state, year, 'Average Percent Obese')
perCol <- paste0("percent_", year)
#make numeric
my_df[,perCol] <- as.numeric(levels(my_df[,perCol])[my_df[,perCol]])
#get rounded average for obesity
avg <- my_df %>% summarise(mean(my_df[,perCol]))
rounded_avg <- round(avg, digits = 1)
#create new data frame
avg_df <- data.frame(my_state, year, rounded_avg)
names(avg_df) <- c(my_state, year, 'Average Percentage Obese')
return(avg_df)
}
df <- avg_yr_state(OB,'2004', "Washington")
df2 <- avg_yr_state(AC, '2004', "Washington")
library(plotly)
library(dplyr)
## Set working directory
#setwd("/Users/Nick/info498f/INFOFinalProject")
## Source formatted data
source("data_format.R")
data <- OB %>% select(1:3, contains('2004'), contains("Lat"), contains("Long")) %>%
filter(OB$State == "Washington")
#create interactive global map
#create map
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 0.5,
countrywidth = 0.5,
subunitcolor = toRGB("white"),
countrycolor = toRGB('white')
)
#create plot
# Create graph with varrying marker sizes based on percentage obese
plot_ly(data,
lon = Long,
lat = Lat,
text = paste(data$County, ', ', data$State,
'<br><b>Percentage Obese:</b>', data$percent_2004),
hoverinfo = 'text',
marker = list(size = data$percent_2004 / 4 , opacity = .4, color = 'red'),
type = 'scattergeo',
locationmode = 'USA-states'
) %>%
layout(title = '2004 Crowdsourced Obesity Statistics', geo = g)
################################# CHOROPLETH ##########################################
data$hover <- with(data, paste(State, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(df, z = total.exports, text = hover, locations = code, type = 'choropleth',
locationmode = 'USA-states', color = total.exports, colors = 'Purples',
marker = list(line = l), colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
shiny::runApp()
runApp()
runApp()
runApp()
help("tabPanel")
runApp()
